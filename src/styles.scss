// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.


// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Default app font
$public-square-font-family: 'Libre Baskerville';

/*
* THEME: Teal
*/
// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$public-square-primary: mat.define-palette(mat.$teal-palette);

// The warn palette is optional (defaults to red).
$public-square-warn: mat.define-palette(mat.$red-palette);
$public-square-typography: mat.define-typography-config(
  $font-family: $public-square-font-family,
);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$public-square-theme: mat.define-light-theme((
  color: (
    primary: $public-square-primary,
    accent: $public-square-primary,
    warn: $public-square-warn,
  ),
  typography: $public-square-typography
));

/*
* THEME: Light
*/
// Define the palettes for your theme
$public-square-light-primary: mat.define-palette(mat.$grey-palette, A100);
$public-square-light-accent: mat.define-palette(mat.$grey-palette, 900);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$public-square-light-theme: mat.define-light-theme((
  color: (
    primary: $public-square-light-primary,
    accent: $public-square-light-accent,
    warn: $public-square-warn,
  ),
  typography: $public-square-typography
));

/*
* THEME: Dark
*/
// Define the palettes for your theme

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$public-square-dark-theme: mat.define-dark-theme((
  color: (
    primary: $public-square-light-accent,
    accent: $public-square-light-primary,
    warn: $public-square-warn,
  ),
  typography: $public-square-typography
));



/*
* THEME: Dark Indigo
*/
// Define the palettes for your theme
$public-square-dark-indigo-primary: mat.define-palette(mat.$indigo-palette, 900);
$public-square-dark-indigo-accent: mat.define-palette(mat.$amber-palette, A400);


// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$public-square-dark-indigo-theme: mat.define-dark-theme((
  color: (
    primary: $public-square-dark-indigo-primary,
    accent: $public-square-dark-indigo-accent,
    warn: $public-square-warn,
  ),
  typography: $public-square-typography
));


// Define all themes
.light-theme {
  @include mat.all-component-colors($public-square-light-theme);
  .border-color-theme {
    border-color: mat.get-color-from-palette($public-square-light-accent, 'default') !important;
  }
}
.dark-theme {
  @include mat.all-component-colors($public-square-dark-theme);
  .border-color-theme {
    border-color: mat.get-color-from-palette($public-square-light-primary, 'default') !important;
  }
}
.teal-theme {
  @include mat.all-component-colors($public-square-theme);
  .border-color-theme {
    border-color: mat.get-color-from-palette($public-square-primary, 'default') !important;
  }
}
.dark-indigo-theme {
  @include mat.all-component-colors($public-square-dark-indigo-theme);
  .border-color-theme {
    border-color: mat.get-color-from-palette($public-square-dark-indigo-accent, 'default') !important;
  }
}

/* CodeMirror START */
.dark-indigo-theme, .dark-theme {
  .CodeMirror, .editor-preview, .editor-preview-side, .editor-toolbar.fullscreen
  { 
    background-color:#303030!important;
    color:#fff!important;
  }
  .editor-toolbar a, .editor-toolbar a.fa
  { 
    color:#fff!important
  }
  .editor-toolbar a.active, .editor-toolbar a:hover
  {
    color:#fff!important; background-color:#303030!important
  }
  .editor-toolbar.disabled-for-preview a:not(.no-disable){
    background-color:#303030!important;color:#ccc!important
  }
  .CodeMirror-cursor {
    border-color: inherit;
  }

}
/* CodeMirror END */




/* Global styles */
html, body { height: 100%; }
body {
  font-family: $public-square-font-family, 'serif';
  padding-top: 60px;
}
* {
  font-family: $public-square-font-family, 'serif';
  box-sizing: border-box;
  margin: 0;
  padding:0;
}

.spacer {
  flex: 1 1 auto;
}
.text-center {
  text-align: center;
}
.text-right {
  text-align: right;
}
.text-left {
  text-align: left;
}
.text-justify {
  text-align: justify;
}

/* FADE IN */
.fadeIn {
  -webkit-animation: fadein 1s; /* Safari, Chrome and Opera > 12.1 */
  -moz-animation: fadein 1s; /* Firefox < 16 */
  -ms-animation: fadein 1s; /* Internet Explorer */
  -o-animation: fadein 1s; /* Opera < 12.1 */
  animation: fadein 1s;

}
@keyframes fadein {
    from { opacity: 0; }
    to   { opacity: 1; }
}

/* Firefox < 16 */
@-moz-keyframes fadein {
    from { opacity: 0; }
    to   { opacity: 1; }
}

/* Safari, Chrome and Opera > 12.1 */
@-webkit-keyframes fadein {
    from { opacity: 0; }
    to   { opacity: 1; }
}

/* Internet Explorer */
@-ms-keyframes fadein {
    from { opacity: 0; }
    to   { opacity: 1; }
}

/* Opera < 12.1 */
@-o-keyframes fadein {
    from { opacity: 0; }
    to   { opacity: 1; }
}

/* /FADE IN */


/* GLOBAL STYLES FOR MATERIAL COMPONENTS */
.mat-snack-bar-container.error{
  background-color: #f44336;
  color: #FFF;
}

.mat-snack-bar-container.success{
  background-color: #69f0ae;
  color: rgba(0,0,0,.87);
}

/*
// Remove background color from drawer bg
.mat-drawer-container {
  background-color: inherit;
}
*/

.secondary-toolbar {
  height: 80px;
}

/*
* simplemde height fix
*/
.CodeMirror, .CodeMirror-scroll {
  min-height: 100px !important;
}

.hide {
  display: none !important;
}


.clear-both {
  clear: both;
}


.nowrap {
  white-space: nowrap;
  overflow: hidden;
}

.ellipsis {
  text-overflow: ellipsis;
}

.word-break {
  word-break: break-word;
}
